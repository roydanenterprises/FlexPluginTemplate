name: Build plugin container

on:
  push:
    branches:
      - main
      - testing
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.7
        with:
          versionSpec: "5.x"
      - name: Determine version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.7
        with:
          useConfigFile: true
      - name: Calculate steps
        id: bash
        run: |
          echo "${{ github.ref_name}}"
          imageTags="${{ steps.gitversion.outputs.nuGetVersion }}"

          case "${{ github.ref_name }}" in
            testing*)
              echo "publish=true" >> $GITHUB_OUTPUT
              echo "octopus_channel=Testing" >> $GITHUB_OUTPUT
              ;;
            main)
              echo "publish=true" >> $GITHUB_OUTPUT
              echo "octopus_channel=Production" >> $GITHUB_OUTPUT
              imageTags+=",latest"
              ;;
          esac
          if [[ -d plugin ]]; then echo "pluginDir=true" >> $GITHUB_OUTPUT; fi
          if [[ -d serverless ]]; then echo "serverlessDir=true" >> $GITHUB_OUTPUT; fi
          echo "repoName=$( echo "${{github.event.repository.name}}" | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
          echo "octopus_project=$( echo "${{github.event.repository.name}}" | cut -d '.' -f 1,2,3 --complement)" >> $GITHUB_OUTPUT
          echo "buildTags="$imageTags"" >> $GITHUB_OUTPUT
      - name: Verify contents exist
        if: ${{ !steps.bash.outputs.pluginDir && !steps.bash.outputs.serverlessDir }}
        run: exit 1

      - name: Patch plugin
        id: plugin
        if: ${{ steps.bash.outputs.pluginDir }}
        run: |
          npm ci --ignore-scripts
          npm version ${{ steps.gitversion.outputs.nuGetVersion }}
          echo "packageName=$(cut -d "=" -f 2 <<< $(npm run env | grep "npm_package_name"))" >> $GITHUB_OUTPUT
        working-directory: ./plugin

      - name: Patch serverless
        id: serverless
        if: ${{ steps.bash.outputs.serverlessDir }}
        run: |
          npm ci --ignore-scripts
          npm version ${{ steps.gitversion.outputs.nuGetVersion }}
          echo "packageName=$(cut -d "=" -f 2 <<< $(npm run env | grep "npm_package_name"))" >> $GITHUB_OUTPUT
        working-directory: ./serverless

      - name: Create and push container image
        if: ${{ steps.bash.outputs.publish }}
        uses: mr-smithers-excellent/docker-build-push@v5
        with:
          image: ${{ steps.bash.outputs.repoName }}
          dockerfile: ./dockerfile
          buildArgs: "REPO_NAME=${{ github.event.repository.name }}"
          directory: ./
          tags: "${{ steps.bash.outputs.buildTags }}"
          registry: roydan.azurecr.io
          username: roydan
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Update LaunchDarkly Flag Name
        if: ${{ steps.bash.outputs.publish }}
        run: |
          name=$([[ ${{ steps.bash.outputs.pluginDir}} ]] && echo "${{ steps.plugin.outputs.packageName }}" || echo "${{ steps.serverless.outputs.packageName }}")
          curl -i -X PATCH 'https://app.launchdarkly.com/api/v2/flags/default/plugin_${{ github.event.repository.name }}' \
               -H 'Authorization: ${{ secrets.LAUNCHDARKLY_API_ACCESS_KEY }}' \
               -H 'Content-Type: application/json' \
               -d "{\"patch\":[{\"op\": \"replace\", \"path\": \"/name\", \"value\": \"Plugin: $name\"}]}"

      - name: Install Octopus CLI
        if: ${{ steps.bash.outputs.publish }}
        uses: OctopusDeploy/install-octopus-cli-action@v1
        with:
          version: latest

      - name: Publish Build Information
        if: ${{ steps.bash.outputs.publish }}
        uses: OctopusDeploy/push-build-information-action@v1
        env:
          OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_API_KEY }}
          OCTOPUS_HOST: https://roydan.octopus.app
          OCTOPUS_SPACE: NexTask
        with:
          packages: "${{ steps.bash.outputs.repoName }}"
          version: "${{ steps.gitversion.outputs.nuGetVersion }}"
          overwrite_mode: IgnoreIfExists
      - name: Create a release in Octopus Deploy
        if: ${{ steps.bash.outputs.publish }}
        uses: OctopusDeploy/create-release-action@v1.1.3
        with:
          server: https://roydan.octopus.app
          space: NexTask
          api_key: ${{ secrets.OCTOPUS_API_KEY }}
          project: ${{ steps.bash.outputs.octopus_project }}
          channel: ${{ steps.bash.outputs.octopus_channel }}
          packages: "${{ steps.bash.outputs.repoName }}:${{ steps.gitversion.outputs.nuGetVersion }}"
          ignore_existing: true
